generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Country {
  id      String  @id @default(cuid())
  code    String  @unique
  name    String
  slug    String  @unique
  meps    MEP[]
  parties Party[]

  @@index([slug])
}

model Party {
  id           String   @id @default(cuid())
  name         String
  abbreviation String?
  euGroup      String?
  countryId    String?
  slug         String   @unique
  meps         MEP[]
  country      Country? @relation(fields: [countryId], references: [id])

  @@index([countryId])
}

model Committee {
  id          String       @id @default(cuid())
  code        String       @unique
  name        String
  slug        String       @unique
  description String?
  memberships Membership[]
}

model MEP {
  id            String       @id @default(cuid())
  epId          String       @unique
  firstName     String
  lastName      String
  slug          String       @unique
  photoUrl      String?
  countryId     String
  partyId       String?
  twitter       String?
  website       String?
  email         String?
  startDate     DateTime?
  endDate       DateTime?
  active        Boolean      @default(true)
  attendancePct Int?
  votesCast     Int          @default(0)
  votesTotal    Int          @default(0)
  attendance    Attendance[]
  country       Country      @relation(fields: [countryId], references: [id])
  party         Party?       @relation(fields: [partyId], references: [id])
  votes         MEPVote[]
  memberships   Membership[]

  @@index([countryId, partyId])
}

model Membership {
  id          String    @id @default(cuid())
  mepId       String
  committeeId String
  role        Role
  committee   Committee @relation(fields: [committeeId], references: [id])
  mep         MEP       @relation(fields: [mepId], references: [id])
}

model Dossier {
  id          String       @id @default(cuid())
  code        String?
  title       String
  slug        String       @unique
  summary     String?
  policyAreas String[]
  tags        DossierTag[]
  votes       Vote[]
}

model Vote {
  id          String    @id @default(cuid())
  epVoteId    String    @unique
  date        DateTime
  dossierId   String?
  title       String?
  description String?
  mepVotes    MEPVote[]
  dossier     Dossier?  @relation(fields: [dossierId], references: [id])
}

model MEPVote {
  id     String @id @default(cuid())
  mepId  String
  voteId String
  choice Choice
  mep    MEP    @relation(fields: [mepId], references: [id])
  vote   Vote   @relation(fields: [voteId], references: [id])

  @@unique([mepId, voteId])
}

model Attendance {
  id          String   @id @default(cuid())
  mepId       String
  date        DateTime
  present     Boolean
  sessionType String?
  mep         MEP      @relation(fields: [mepId], references: [id])

  @@index([mepId, date])
}

model Topic {
  id          String  @id @default(cuid())
  slug        String  @unique
  name        String
  description String?
}

model Tag {
  id       String       @id @default(cuid())
  slug     String       @unique
  name     String
  dossiers DossierTag[]
}

model DossierTag {
  dossierId String
  tagId     String
  dossier   Dossier @relation(fields: [dossierId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([dossierId, tagId])
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  image         String?
  role          String         @default("user")
  apiKey        String?
  alerts        Alert[]
  subscriptions Subscription[]
}

model Subscription {
  id          String @id @default(cuid())
  userId      String
  stripeSubId String
  plan        String
  status      String
  seats       Int    @default(1)
  user        User   @relation(fields: [userId], references: [id])
}

model Alert {
  id        String   @id @default(cuid())
  userId    String
  criteria  Json
  channel   Channel
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  member
  substitute
  chair
  vicechair
}

enum Choice {
  for
  against
  abstain
  absent
}

enum Channel {
  email
  slack
  webhook
}

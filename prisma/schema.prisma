// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id        String @id @default(cuid())
  code      String @unique
  name      String
  slug      String @unique
  parties   Party[]
  meps      MEP[]
  
  @@index([slug])
}

model Party {
  id           String @id @default(cuid())
  name         String
  abbreviation String?
  euGroup      String?
  country      Country @relation(fields: [countryId], references: [id])
  countryId    String
  slug         String @unique
  meps         MEP[]
  
  @@index([countryId])
}

model Committee {
  id           String @id @default(cuid())
  code         String @unique
  name         String
  slug         String @unique
  description  String?
  memberships  Membership[]
}

model MEP {
  id           String @id @default(cuid())
  epId         String @unique
  firstName    String
  lastName     String
  slug         String @unique
  photoUrl     String?
  country      Country @relation(fields: [countryId], references: [id])
  countryId    String
  party        Party? @relation(fields: [partyId], references: [id])
  partyId      String?
  twitter      String?
  website      String?
  email        String?
  startDate    DateTime?
  endDate      DateTime?
  active       Boolean @default(true)
  memberships  Membership[]
  votes        MEPVote[]
  attendance   Attendance[]
  
  @@index([countryId, partyId])
}

model Membership {
  id         String @id @default(cuid())
  mep        MEP @relation(fields: [mepId], references: [id])
  mepId      String
  committee  Committee @relation(fields: [committeeId], references: [id])
  committeeId String
  role       Role
}

enum Role {
  member
  substitute
  chair
  vicechair
}

model Dossier {
  id          String @id @default(cuid())
  code        String?
  title       String
  slug        String @unique
  summary     String?
  policyAreas String[]
  votes       Vote[]
  tags        DossierTag[]
}

model Vote {
  id          String @id @default(cuid())
  epVoteId    String @unique
  date        DateTime
  dossier     Dossier? @relation(fields: [dossierId], references: [id])
  dossierId   String?
  title       String?
  description String?
  mepVotes    MEPVote[]
}

model MEPVote {
  id      String @id @default(cuid())
  mep     MEP @relation(fields: [mepId], references: [id])
  mepId   String
  vote    Vote @relation(fields: [voteId], references: [id])
  voteId  String
  choice  Choice
  
  @@unique([mepId, voteId])
}

enum Choice {
  for
  against
  abstain
  absent
}

model Attendance {
  id          String @id @default(cuid())
  mep         MEP @relation(fields: [mepId], references: [id])
  mepId       String
  date        DateTime
  present     Boolean
  sessionType String?
  
  @@index([mepId, date])
}

model Topic {
  id          String @id @default(cuid())
  slug        String @unique
  name        String
  description String?
}

model Tag {
  id   String @id @default(cuid())
  slug String @unique
  name String
  dossiers DossierTag[]
}

model DossierTag {
  dossier   Dossier @relation(fields: [dossierId], references: [id])
  dossierId String
  tag       Tag @relation(fields: [tagId], references: [id])
  tagId     String
  
  @@id([dossierId, tagId])
}

model User {
  id           String @id @default(cuid())
  email        String @unique
  name         String?
  image        String?
  role         String @default("user")
  apiKey       String?
  subscriptions Subscription[]
  alerts       Alert[]
}

model Subscription {
  id          String @id @default(cuid())
  user        User @relation(fields: [userId], references: [id])
  userId      String
  stripeSubId String
  plan        String
  status      String
  seats       Int @default(1)
}

model Alert {
  id        String @id @default(cuid())
  user      User @relation(fields: [userId], references: [id])
  userId    String
  criteria  Json
  channel   Channel
  active    Boolean @default(true)
  createdAt DateTime @default(now())
}

enum Channel {
  email
  slack
  webhook
}
